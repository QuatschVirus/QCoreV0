//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/jonat/source/repos/QCoreV0/Software/QCoreV0/Quassel/ANTLR/qcal.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class qcalLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, BLOCKCOMMENT=2, GPREGREF=3, CSREGREF=4, STRINGLITERAL=5, CHARLITERAL=6, 
		NUMLITERAL=7, IDENTIFIER=8, SEMICOLON=9, COMMA=10, DOT=11, HASH=12, COLON=13, 
		SPACE=14, NEWLINE=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "BLOCKCOMMENT", "GPREGREF", "CSREGREF", "STRINGLITERAL", "CHARLITERAL", 
		"NUMLITERAL", "IDENTIFIER", "SEMICOLON", "COMMA", "DOT", "HASH", "COLON", 
		"LWRCASE", "UPRCASE", "DGT10", "DGT16", "ESCAPEDCHAR", "SPACE", "NEWLINE"
	};


	public qcalLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public qcalLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "';'", "','", "'.'", 
		"'#'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "BLOCKCOMMENT", "GPREGREF", "CSREGREF", "STRINGLITERAL", 
		"CHARLITERAL", "NUMLITERAL", "IDENTIFIER", "SEMICOLON", "COMMA", "DOT", 
		"HASH", "COLON", "SPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "qcal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static qcalLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,152,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,
		5,0,46,8,0,10,0,12,0,49,9,0,1,1,1,1,1,1,1,1,5,1,55,8,1,10,1,12,1,58,9,
		1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,69,8,2,1,3,1,3,1,3,4,3,74,8,
		3,11,3,12,3,75,1,4,1,4,1,4,5,4,81,8,4,10,4,12,4,84,9,4,1,4,1,4,1,5,1,5,
		1,5,3,5,91,8,5,1,5,1,5,1,6,4,6,96,8,6,11,6,12,6,97,1,6,1,6,1,6,4,6,103,
		8,6,11,6,12,6,104,3,6,107,8,6,1,7,1,7,3,7,111,8,7,1,7,1,7,1,7,1,7,5,7,
		117,8,7,10,7,12,7,120,9,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,4,18,144,8,
		18,11,18,12,18,145,1,19,3,19,149,8,19,1,19,1,19,1,56,0,20,1,1,3,2,5,3,
		7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,0,29,0,31,0,33,
		0,35,0,37,14,39,15,1,0,10,2,0,10,10,13,13,2,0,88,88,120,120,2,0,34,34,
		92,92,2,0,39,39,92,92,1,0,97,122,1,0,65,90,1,0,48,57,3,0,48,57,65,70,97,
		102,9,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,118,118,
		2,0,9,9,32,32,165,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,
		1,0,0,0,3,50,1,0,0,0,5,62,1,0,0,0,7,70,1,0,0,0,9,77,1,0,0,0,11,87,1,0,
		0,0,13,106,1,0,0,0,15,110,1,0,0,0,17,121,1,0,0,0,19,123,1,0,0,0,21,125,
		1,0,0,0,23,127,1,0,0,0,25,129,1,0,0,0,27,131,1,0,0,0,29,133,1,0,0,0,31,
		135,1,0,0,0,33,137,1,0,0,0,35,139,1,0,0,0,37,143,1,0,0,0,39,148,1,0,0,
		0,41,42,5,47,0,0,42,43,5,47,0,0,43,47,1,0,0,0,44,46,8,0,0,0,45,44,1,0,
		0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,2,1,0,0,0,49,47,1,0,0,
		0,50,51,5,47,0,0,51,52,5,42,0,0,52,56,1,0,0,0,53,55,9,0,0,0,54,53,1,0,
		0,0,55,58,1,0,0,0,56,57,1,0,0,0,56,54,1,0,0,0,57,59,1,0,0,0,58,56,1,0,
		0,0,59,60,5,42,0,0,60,61,5,47,0,0,61,4,1,0,0,0,62,68,7,1,0,0,63,69,3,31,
		15,0,64,65,2,48,50,0,65,69,3,31,15,0,66,67,5,51,0,0,67,69,2,48,49,0,68,
		63,1,0,0,0,68,64,1,0,0,0,68,66,1,0,0,0,69,6,1,0,0,0,70,73,5,37,0,0,71,
		74,3,27,13,0,72,74,3,29,14,0,73,71,1,0,0,0,73,72,1,0,0,0,74,75,1,0,0,0,
		75,73,1,0,0,0,75,76,1,0,0,0,76,8,1,0,0,0,77,82,5,34,0,0,78,81,3,35,17,
		0,79,81,8,2,0,0,80,78,1,0,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,
		0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,5,34,0,0,86,10,1,0,0,
		0,87,90,5,39,0,0,88,91,3,35,17,0,89,91,8,3,0,0,90,88,1,0,0,0,90,89,1,0,
		0,0,91,92,1,0,0,0,92,93,5,39,0,0,93,12,1,0,0,0,94,96,3,31,15,0,95,94,1,
		0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,107,1,0,0,0,99,100,
		5,48,0,0,100,102,7,1,0,0,101,103,3,33,16,0,102,101,1,0,0,0,103,104,1,0,
		0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,95,1,0,0,0,106,
		99,1,0,0,0,107,14,1,0,0,0,108,111,3,27,13,0,109,111,3,29,14,0,110,108,
		1,0,0,0,110,109,1,0,0,0,111,118,1,0,0,0,112,117,3,27,13,0,113,117,3,29,
		14,0,114,117,3,31,15,0,115,117,5,95,0,0,116,112,1,0,0,0,116,113,1,0,0,
		0,116,114,1,0,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,
		119,1,0,0,0,119,16,1,0,0,0,120,118,1,0,0,0,121,122,5,59,0,0,122,18,1,0,
		0,0,123,124,5,44,0,0,124,20,1,0,0,0,125,126,5,46,0,0,126,22,1,0,0,0,127,
		128,5,35,0,0,128,24,1,0,0,0,129,130,5,58,0,0,130,26,1,0,0,0,131,132,7,
		4,0,0,132,28,1,0,0,0,133,134,7,5,0,0,134,30,1,0,0,0,135,136,7,6,0,0,136,
		32,1,0,0,0,137,138,7,7,0,0,138,34,1,0,0,0,139,140,5,92,0,0,140,141,7,8,
		0,0,141,36,1,0,0,0,142,144,7,9,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,
		143,1,0,0,0,145,146,1,0,0,0,146,38,1,0,0,0,147,149,5,13,0,0,148,147,1,
		0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,151,5,10,0,0,151,40,1,0,0,0,
		17,0,47,56,68,73,75,80,82,90,97,104,106,110,116,118,145,148,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
