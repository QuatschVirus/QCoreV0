//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/jonat/source/repos/QCoreV0/Software/QCoreV0/Quassel/ANTLR/qcal.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class qcalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, BLOCKCOMMENT=2, GPREGREF=3, CSREGREF=4, STRINGLITERAL=5, CHARLITERAL=6, 
		NUMLITERAL=7, IDENTIFIER=8, SEMICOLON=9, COMMA=10, DOT=11, HASH=12, COLON=13, 
		SPACE=14, NEWLINE=15;
	public const int
		RULE_code = 0, RULE_code_line = 1, RULE_statement = 2, RULE_instruction = 3, 
		RULE_directive = 4, RULE_container_start = 5, RULE_container_end = 6, 
		RULE_parameter_list = 7, RULE_parameter = 8, RULE_parameter_identifier = 9, 
		RULE_parameter_value = 10, RULE_regref = 11;
	public static readonly string[] ruleNames = {
		"code", "code_line", "statement", "instruction", "directive", "container_start", 
		"container_end", "parameter_list", "parameter", "parameter_identifier", 
		"parameter_value", "regref"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "';'", "','", "'.'", 
		"'#'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "BLOCKCOMMENT", "GPREGREF", "CSREGREF", "STRINGLITERAL", 
		"CHARLITERAL", "NUMLITERAL", "IDENTIFIER", "SEMICOLON", "COMMA", "DOT", 
		"HASH", "COLON", "SPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "qcal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static qcalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public qcalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public qcalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(qcalParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Code_lineContext[] code_line() {
			return GetRuleContexts<Code_lineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Code_lineContext code_line(int i) {
			return GetRuleContext<Code_lineContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 24;
				code_line();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 55558L) != 0) );
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Code_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(qcalParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(qcalParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(qcalParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(qcalParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCKCOMMENT() { return GetToken(qcalParser.BLOCKCOMMENT, 0); }
		public Code_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterCode_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitCode_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Code_lineContext code_line() {
		Code_lineContext _localctx = new Code_lineContext(Context, State);
		EnterRule(_localctx, 2, RULE_code_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 31;
					Match(SPACE);
					}
					} 
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6400L) != 0)) {
				{
				State = 37;
				statement();
				}
			}

			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 40;
				Match(SPACE);
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT || _la==BLOCKCOMMENT) {
				{
				State = 46;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMENT || _la==BLOCKCOMMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 49;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Container_startContext container_start() {
			return GetRuleContext<Container_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Container_endContext container_end() {
			return GetRuleContext<Container_endContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				container_start();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				container_end();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				instruction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(qcalParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(qcalParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(qcalParser.SPACE, i);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(IDENTIFIER);
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 58;
					Match(SPACE);
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SPACE );
				State = 63;
				parameter_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(qcalParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(qcalParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(qcalParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(qcalParser.SPACE, i);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 66;
			Match(HASH);
			State = 67;
			Match(IDENTIFIER);
			}
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 69;
					Match(SPACE);
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SPACE );
				State = 74;
				parameter_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(qcalParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(qcalParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(qcalParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(qcalParser.SPACE, i);
		}
		public Container_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterContainer_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitContainer_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_startContext container_start() {
		Container_startContext _localctx = new Container_startContext(Context, State);
		EnterRule(_localctx, 10, RULE_container_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 77;
			Match(DOT);
			State = 78;
			Match(IDENTIFIER);
			}
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 80;
					Match(SPACE);
					}
					}
					State = 83;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==SPACE );
				State = 85;
				parameter_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_endContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(qcalParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(qcalParser.DOT, i);
		}
		public Container_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterContainer_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitContainer_end(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_end(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_endContext container_end() {
		Container_endContext _localctx = new Container_endContext(Context, State);
		EnterRule(_localctx, 12, RULE_container_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(DOT);
			State = 89;
			Match(DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(qcalParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(qcalParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(qcalParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(qcalParser.SPACE, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameter_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			parameter();
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 106;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						State = 95;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==SPACE) {
							{
							{
							State = 92;
							Match(SPACE);
							}
							}
							State = 97;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 98;
						Match(COMMA);
						State = 102;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==SPACE) {
							{
							{
							State = 99;
							Match(SPACE);
							}
							}
							State = 104;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					case 2:
						{
						State = 105;
						Match(SPACE);
						}
						break;
					}
					State = 108;
					parameter();
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_valueContext parameter_value() {
			return GetRuleContext<Parameter_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_identifierContext parameter_identifier() {
			return GetRuleContext<Parameter_identifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 114;
				parameter_identifier();
				}
				break;
			}
			State = 117;
			parameter_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(qcalParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(qcalParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(qcalParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(qcalParser.SPACE, i);
		}
		public Parameter_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterParameter_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitParameter_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_identifierContext parameter_identifier() {
		Parameter_identifierContext _localctx = new Parameter_identifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameter_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(IDENTIFIER);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 120;
				Match(SPACE);
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 126;
			Match(COLON);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 127;
				Match(SPACE);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegrefContext regref() {
			return GetRuleContext<RegrefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(qcalParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLITERAL() { return GetToken(qcalParser.CHARLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMLITERAL() { return GetToken(qcalParser.NUMLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(qcalParser.IDENTIFIER, 0); }
		public Parameter_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterParameter_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitParameter_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_valueContext parameter_value() {
		Parameter_valueContext _localctx = new Parameter_valueContext(Context, State);
		EnterRule(_localctx, 20, RULE_parameter_value);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GPREGREF:
			case CSREGREF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				regref();
				}
				break;
			case STRINGLITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(STRINGLITERAL);
				}
				break;
			case CHARLITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 135;
				Match(CHARLITERAL);
				}
				break;
			case NUMLITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 136;
				Match(NUMLITERAL);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 137;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GPREGREF() { return GetToken(qcalParser.GPREGREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSREGREF() { return GetToken(qcalParser.CSREGREF, 0); }
		public RegrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterRegref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitRegref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IqcalVisitor<TResult> typedVisitor = visitor as IqcalVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegrefContext regref() {
		RegrefContext _localctx = new RegrefContext(Context, State);
		EnterRule(_localctx, 22, RULE_regref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(_la==GPREGREF || _la==CSREGREF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,15,143,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,4,0,26,8,0,11,0,12,0,27,1,
		0,1,0,1,1,5,1,33,8,1,10,1,12,1,36,9,1,1,1,3,1,39,8,1,1,1,5,1,42,8,1,10,
		1,12,1,45,9,1,1,1,3,1,48,8,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,56,8,2,1,3,1,
		3,4,3,60,8,3,11,3,12,3,61,1,3,3,3,65,8,3,1,4,1,4,1,4,1,4,4,4,71,8,4,11,
		4,12,4,72,1,4,3,4,76,8,4,1,5,1,5,1,5,1,5,4,5,82,8,5,11,5,12,5,83,1,5,3,
		5,87,8,5,1,6,1,6,1,6,1,7,1,7,5,7,94,8,7,10,7,12,7,97,9,7,1,7,1,7,5,7,101,
		8,7,10,7,12,7,104,9,7,1,7,3,7,107,8,7,1,7,5,7,110,8,7,10,7,12,7,113,9,
		7,1,8,3,8,116,8,8,1,8,1,8,1,9,1,9,5,9,122,8,9,10,9,12,9,125,9,9,1,9,1,
		9,5,9,129,8,9,10,9,12,9,132,9,9,1,10,1,10,1,10,1,10,1,10,3,10,139,8,10,
		1,11,1,11,1,11,0,0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,2,1,0,1,2,1,0,3,
		4,155,0,25,1,0,0,0,2,34,1,0,0,0,4,55,1,0,0,0,6,57,1,0,0,0,8,66,1,0,0,0,
		10,77,1,0,0,0,12,88,1,0,0,0,14,91,1,0,0,0,16,115,1,0,0,0,18,119,1,0,0,
		0,20,138,1,0,0,0,22,140,1,0,0,0,24,26,3,2,1,0,25,24,1,0,0,0,26,27,1,0,
		0,0,27,25,1,0,0,0,27,28,1,0,0,0,28,29,1,0,0,0,29,30,5,0,0,1,30,1,1,0,0,
		0,31,33,5,14,0,0,32,31,1,0,0,0,33,36,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,
		0,35,38,1,0,0,0,36,34,1,0,0,0,37,39,3,4,2,0,38,37,1,0,0,0,38,39,1,0,0,
		0,39,43,1,0,0,0,40,42,5,14,0,0,41,40,1,0,0,0,42,45,1,0,0,0,43,41,1,0,0,
		0,43,44,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,46,48,7,0,0,0,47,46,1,0,0,
		0,47,48,1,0,0,0,48,49,1,0,0,0,49,50,5,15,0,0,50,3,1,0,0,0,51,56,3,10,5,
		0,52,56,3,12,6,0,53,56,3,6,3,0,54,56,3,8,4,0,55,51,1,0,0,0,55,52,1,0,0,
		0,55,53,1,0,0,0,55,54,1,0,0,0,56,5,1,0,0,0,57,64,5,8,0,0,58,60,5,14,0,
		0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,
		0,63,65,3,14,7,0,64,59,1,0,0,0,64,65,1,0,0,0,65,7,1,0,0,0,66,67,5,12,0,
		0,67,68,5,8,0,0,68,75,1,0,0,0,69,71,5,14,0,0,70,69,1,0,0,0,71,72,1,0,0,
		0,72,70,1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,76,3,14,7,0,75,70,1,0,0,
		0,75,76,1,0,0,0,76,9,1,0,0,0,77,78,5,11,0,0,78,79,5,8,0,0,79,86,1,0,0,
		0,80,82,5,14,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,
		0,84,85,1,0,0,0,85,87,3,14,7,0,86,81,1,0,0,0,86,87,1,0,0,0,87,11,1,0,0,
		0,88,89,5,11,0,0,89,90,5,11,0,0,90,13,1,0,0,0,91,111,3,16,8,0,92,94,5,
		14,0,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,
		0,0,0,97,95,1,0,0,0,98,102,5,10,0,0,99,101,5,14,0,0,100,99,1,0,0,0,101,
		104,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,107,1,0,0,0,104,102,1,
		0,0,0,105,107,5,14,0,0,106,95,1,0,0,0,106,105,1,0,0,0,107,108,1,0,0,0,
		108,110,3,16,8,0,109,106,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,
		1,0,0,0,112,15,1,0,0,0,113,111,1,0,0,0,114,116,3,18,9,0,115,114,1,0,0,
		0,115,116,1,0,0,0,116,117,1,0,0,0,117,118,3,20,10,0,118,17,1,0,0,0,119,
		123,5,8,0,0,120,122,5,14,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,
		0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,130,5,13,0,0,
		127,129,5,14,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,
		1,0,0,0,131,19,1,0,0,0,132,130,1,0,0,0,133,139,3,22,11,0,134,139,5,5,0,
		0,135,139,5,6,0,0,136,139,5,7,0,0,137,139,5,8,0,0,138,133,1,0,0,0,138,
		134,1,0,0,0,138,135,1,0,0,0,138,136,1,0,0,0,138,137,1,0,0,0,139,21,1,0,
		0,0,140,141,7,1,0,0,141,23,1,0,0,0,20,27,34,38,43,47,55,61,64,72,75,83,
		86,95,102,106,111,115,123,130,138
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
