//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/jonat/source/repos/QCoreV0/ANTLR Experiment/Quassel/qcal.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class qcalParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, BLOCKCOMMENT=2, GPREGREF=3, CSREGREF=4, STRINGLITERAL=5, CHARLITERAL=6, 
		NUMLITERAL=7, INSTRUCTION=8, IDENTIFIER=9, SEMICOLON=10, COMMA=11, SPACE=12, 
		NEWLINE=13;
	public const int
		RULE_program = 0, RULE_statement_block = 1, RULE_statement_seperator = 2, 
		RULE_statement = 3, RULE_parameter_list = 4, RULE_parameter_separator = 5, 
		RULE_parameter = 6, RULE_regref = 7;
	public static readonly string[] ruleNames = {
		"program", "statement_block", "statement_seperator", "statement", "parameter_list", 
		"parameter_separator", "parameter", "regref"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "BLOCKCOMMENT", "GPREGREF", "CSREGREF", "STRINGLITERAL", 
		"CHARLITERAL", "NUMLITERAL", "INSTRUCTION", "IDENTIFIER", "SEMICOLON", 
		"COMMA", "SPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "qcal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static qcalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public qcalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public qcalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(qcalParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			statement_block();
			State = 17;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_seperatorContext[] statement_seperator() {
			return GetRuleContexts<Statement_seperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_seperatorContext statement_seperator(int i) {
			return GetRuleContext<Statement_seperatorContext>(i);
		}
		public Statement_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterStatement_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitStatement_block(this);
		}
	}

	[RuleVersion(0)]
	public Statement_blockContext statement_block() {
		Statement_blockContext _localctx = new Statement_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			statement();
			State = 25;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 20;
					statement_seperator();
					State = 21;
					statement();
					}
					} 
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13312L) != 0)) {
				{
				State = 28;
				statement_seperator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_seperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(qcalParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(qcalParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(qcalParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(qcalParser.SPACE, i);
		}
		public Statement_seperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_seperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterStatement_seperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitStatement_seperator(this);
		}
	}

	[RuleVersion(0)]
	public Statement_seperatorContext statement_seperator() {
		Statement_seperatorContext _localctx = new Statement_seperatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement_seperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 31;
				Match(SPACE);
				}
			}

			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 34;
				Match(SEMICOLON);
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 35;
					Match(NEWLINE);
					}
				}

				}
				break;
			case 2:
				{
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 38;
					Match(SEMICOLON);
					}
				}

				State = 41;
				Match(NEWLINE);
				}
				break;
			}
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 44;
				Match(SPACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTRUCTION() { return GetToken(qcalParser.INSTRUCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(qcalParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(INSTRUCTION);
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 48;
				Match(SPACE);
				State = 49;
				parameter_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_separatorContext[] parameter_separator() {
			return GetRuleContexts<Parameter_separatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_separatorContext parameter_separator(int i) {
			return GetRuleContext<Parameter_separatorContext>(i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameter_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			parameter();
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 53;
					parameter_separator();
					State = 54;
					parameter();
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_separatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(qcalParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(qcalParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(qcalParser.SPACE, i);
		}
		public Parameter_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterParameter_separator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitParameter_separator(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_separatorContext parameter_separator() {
		Parameter_separatorContext _localctx = new Parameter_separatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameter_separator);
		int _la;
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 61;
					Match(SPACE);
					}
				}

				State = 64;
				Match(COMMA);
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 65;
					Match(SPACE);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				Match(SPACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegrefContext regref() {
			return GetRuleContext<RegrefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLITERAL() { return GetToken(qcalParser.STRINGLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARLITERAL() { return GetToken(qcalParser.CHARLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMLITERAL() { return GetToken(qcalParser.NUMLITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(qcalParser.IDENTIFIER, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GPREGREF:
			case CSREGREF:
				{
				State = 71;
				regref();
				}
				break;
			case STRINGLITERAL:
				{
				State = 72;
				Match(STRINGLITERAL);
				}
				break;
			case CHARLITERAL:
				{
				State = 73;
				Match(CHARLITERAL);
				}
				break;
			case NUMLITERAL:
				{
				State = 74;
				Match(NUMLITERAL);
				}
				break;
			case IDENTIFIER:
				{
				State = 75;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegrefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GPREGREF() { return GetToken(qcalParser.GPREGREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSREGREF() { return GetToken(qcalParser.CSREGREF, 0); }
		public RegrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.EnterRegref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IqcalListener typedListener = listener as IqcalListener;
			if (typedListener != null) typedListener.ExitRegref(this);
		}
	}

	[RuleVersion(0)]
	public RegrefContext regref() {
		RegrefContext _localctx = new RegrefContext(Context, State);
		EnterRule(_localctx, 14, RULE_regref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !(_la==GPREGREF || _la==CSREGREF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,13,81,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,24,8,1,10,1,12,1,27,9,1,1,1,3,1,30,
		8,1,1,2,3,2,33,8,2,1,2,1,2,3,2,37,8,2,1,2,3,2,40,8,2,1,2,3,2,43,8,2,1,
		2,3,2,46,8,2,1,3,1,3,1,3,3,3,51,8,3,1,4,1,4,1,4,1,4,5,4,57,8,4,10,4,12,
		4,60,9,4,1,5,3,5,63,8,5,1,5,1,5,3,5,67,8,5,1,5,3,5,70,8,5,1,6,1,6,1,6,
		1,6,1,6,3,6,77,8,6,1,7,1,7,1,7,0,0,8,0,2,4,6,8,10,12,14,0,1,1,0,3,4,88,
		0,16,1,0,0,0,2,19,1,0,0,0,4,32,1,0,0,0,6,47,1,0,0,0,8,52,1,0,0,0,10,69,
		1,0,0,0,12,76,1,0,0,0,14,78,1,0,0,0,16,17,3,2,1,0,17,18,5,0,0,1,18,1,1,
		0,0,0,19,25,3,6,3,0,20,21,3,4,2,0,21,22,3,6,3,0,22,24,1,0,0,0,23,20,1,
		0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,26,29,1,0,0,0,27,25,1,
		0,0,0,28,30,3,4,2,0,29,28,1,0,0,0,29,30,1,0,0,0,30,3,1,0,0,0,31,33,5,12,
		0,0,32,31,1,0,0,0,32,33,1,0,0,0,33,42,1,0,0,0,34,36,5,10,0,0,35,37,5,13,
		0,0,36,35,1,0,0,0,36,37,1,0,0,0,37,43,1,0,0,0,38,40,5,10,0,0,39,38,1,0,
		0,0,39,40,1,0,0,0,40,41,1,0,0,0,41,43,5,13,0,0,42,34,1,0,0,0,42,39,1,0,
		0,0,43,45,1,0,0,0,44,46,5,12,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,5,1,0,
		0,0,47,50,5,8,0,0,48,49,5,12,0,0,49,51,3,8,4,0,50,48,1,0,0,0,50,51,1,0,
		0,0,51,7,1,0,0,0,52,58,3,12,6,0,53,54,3,10,5,0,54,55,3,12,6,0,55,57,1,
		0,0,0,56,53,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,9,1,0,
		0,0,60,58,1,0,0,0,61,63,5,12,0,0,62,61,1,0,0,0,62,63,1,0,0,0,63,64,1,0,
		0,0,64,66,5,11,0,0,65,67,5,12,0,0,66,65,1,0,0,0,66,67,1,0,0,0,67,70,1,
		0,0,0,68,70,5,12,0,0,69,62,1,0,0,0,69,68,1,0,0,0,70,11,1,0,0,0,71,77,3,
		14,7,0,72,77,5,5,0,0,73,77,5,6,0,0,74,77,5,7,0,0,75,77,5,9,0,0,76,71,1,
		0,0,0,76,72,1,0,0,0,76,73,1,0,0,0,76,74,1,0,0,0,76,75,1,0,0,0,77,13,1,
		0,0,0,78,79,7,0,0,0,79,15,1,0,0,0,13,25,29,32,36,39,42,45,50,58,62,66,
		69,76
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
