//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/jonat/source/repos/QCoreV0/ANTLR Experiment/Quassel/qcal.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class qcalLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, BLOCKCOMMENT=2, GPREGREF=3, CSREGREF=4, STRINGLITERAL=5, CHARLITERAL=6, 
		NUMLITERAL=7, INSTRUCTION=8, IDENTIFIER=9, SEMICOLON=10, COMMA=11, SPACE=12, 
		NEWLINE=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "BLOCKCOMMENT", "GPREGREF", "CSREGREF", "STRINGLITERAL", "CHARLITERAL", 
		"NUMLITERAL", "INSTRUCTION", "IDENTIFIER", "SEMICOLON", "COMMA", "LWRCASE", 
		"UPRCASE", "DGT10", "DGT16", "ESCAPEDCHAR", "SPACE", "NEWLINE"
	};


	public qcalLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public qcalLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "BLOCKCOMMENT", "GPREGREF", "CSREGREF", "STRINGLITERAL", 
		"CHARLITERAL", "NUMLITERAL", "INSTRUCTION", "IDENTIFIER", "SEMICOLON", 
		"COMMA", "SPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "qcal.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static qcalLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,148,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,5,0,42,8,0,10,0,12,
		0,45,9,0,1,1,1,1,1,1,1,1,5,1,51,8,1,10,1,12,1,54,9,1,1,1,1,1,1,1,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,65,8,2,1,3,1,3,1,3,4,3,70,8,3,11,3,12,3,71,1,4,1,
		4,1,4,5,4,77,8,4,10,4,12,4,80,9,4,1,4,1,4,1,5,1,5,1,5,3,5,87,8,5,1,5,1,
		5,1,6,4,6,92,8,6,11,6,12,6,93,1,6,1,6,1,6,4,6,99,8,6,11,6,12,6,100,3,6,
		103,8,6,1,7,1,7,4,7,107,8,7,11,7,12,7,108,1,8,1,8,3,8,113,8,8,1,8,1,8,
		1,8,1,8,5,8,119,8,8,10,8,12,8,122,9,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,4,16,140,8,16,11,16,12,16,
		141,1,17,3,17,145,8,17,1,17,1,17,1,52,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,0,25,0,27,0,29,0,31,0,33,12,35,13,1,0,10,2,
		0,10,10,13,13,2,0,88,88,120,120,2,0,34,34,92,92,2,0,39,39,92,92,1,0,97,
		122,1,0,65,90,1,0,48,57,3,0,48,57,65,70,97,102,9,0,34,34,39,39,92,92,98,
		98,102,102,110,110,114,114,116,116,118,118,2,0,9,9,32,32,163,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,33,1,0,0,0,
		0,35,1,0,0,0,1,37,1,0,0,0,3,46,1,0,0,0,5,58,1,0,0,0,7,66,1,0,0,0,9,73,
		1,0,0,0,11,83,1,0,0,0,13,102,1,0,0,0,15,106,1,0,0,0,17,112,1,0,0,0,19,
		123,1,0,0,0,21,125,1,0,0,0,23,127,1,0,0,0,25,129,1,0,0,0,27,131,1,0,0,
		0,29,133,1,0,0,0,31,135,1,0,0,0,33,139,1,0,0,0,35,144,1,0,0,0,37,38,5,
		47,0,0,38,39,5,47,0,0,39,43,1,0,0,0,40,42,8,0,0,0,41,40,1,0,0,0,42,45,
		1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,2,1,0,0,0,45,43,1,0,0,0,46,47,5,
		47,0,0,47,48,5,42,0,0,48,52,1,0,0,0,49,51,9,0,0,0,50,49,1,0,0,0,51,54,
		1,0,0,0,52,53,1,0,0,0,52,50,1,0,0,0,53,55,1,0,0,0,54,52,1,0,0,0,55,56,
		5,42,0,0,56,57,5,47,0,0,57,4,1,0,0,0,58,64,7,1,0,0,59,65,3,27,13,0,60,
		61,2,48,50,0,61,65,3,27,13,0,62,63,5,51,0,0,63,65,2,48,49,0,64,59,1,0,
		0,0,64,60,1,0,0,0,64,62,1,0,0,0,65,6,1,0,0,0,66,69,5,37,0,0,67,70,3,23,
		11,0,68,70,3,25,12,0,69,67,1,0,0,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,
		0,0,0,71,72,1,0,0,0,72,8,1,0,0,0,73,78,5,34,0,0,74,77,3,31,15,0,75,77,
		8,2,0,0,76,74,1,0,0,0,76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,
		1,0,0,0,79,81,1,0,0,0,80,78,1,0,0,0,81,82,5,34,0,0,82,10,1,0,0,0,83,86,
		5,39,0,0,84,87,3,31,15,0,85,87,8,3,0,0,86,84,1,0,0,0,86,85,1,0,0,0,87,
		88,1,0,0,0,88,89,5,39,0,0,89,12,1,0,0,0,90,92,3,27,13,0,91,90,1,0,0,0,
		92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,103,1,0,0,0,95,96,5,48,0,
		0,96,98,7,1,0,0,97,99,3,29,14,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,
		0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,91,1,0,0,0,102,95,1,0,0,0,103,
		14,1,0,0,0,104,107,3,23,11,0,105,107,3,25,12,0,106,104,1,0,0,0,106,105,
		1,0,0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,16,1,0,0,0,
		110,113,3,23,11,0,111,113,3,25,12,0,112,110,1,0,0,0,112,111,1,0,0,0,113,
		120,1,0,0,0,114,119,3,23,11,0,115,119,3,25,12,0,116,119,3,27,13,0,117,
		119,5,95,0,0,118,114,1,0,0,0,118,115,1,0,0,0,118,116,1,0,0,0,118,117,1,
		0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,18,1,0,0,0,122,
		120,1,0,0,0,123,124,5,59,0,0,124,20,1,0,0,0,125,126,5,44,0,0,126,22,1,
		0,0,0,127,128,7,4,0,0,128,24,1,0,0,0,129,130,7,5,0,0,130,26,1,0,0,0,131,
		132,7,6,0,0,132,28,1,0,0,0,133,134,7,7,0,0,134,30,1,0,0,0,135,136,5,92,
		0,0,136,137,7,8,0,0,137,32,1,0,0,0,138,140,7,9,0,0,139,138,1,0,0,0,140,
		141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,34,1,0,0,0,143,145,5,13,
		0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,5,10,0,0,147,
		36,1,0,0,0,19,0,43,52,64,69,71,76,78,86,93,100,102,106,108,112,118,120,
		141,144,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
